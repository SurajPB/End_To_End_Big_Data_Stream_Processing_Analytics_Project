package com.orendainx.trucking.simulator.simulators

import akka.actor.{ActorSystem, Inbox}
import better.files.File
import com.orendainx.trucking.commons.models.TruckingData
import com.orendainx.trucking.simulator.coordinators.ManualCoordinator
import com.orendainx.trucking.simulator.depots.NoSharingDepot
import com.orendainx.trucking.simulator.flows.SharedFlowManager
import com.orendainx.trucking.simulator.generators.TruckAndTrafficGenerator
import com.orendainx.trucking.simulator.services.DriverFactory
import com.orendainx.trucking.simulator.transmitters.BufferTransmitter
import com.typesafe.config.{Config, ConfigFactory}

import scala.concurrent.Await
import scala.concurrent.duration._

/**
  * This simulator requires the tick() method to be called to tick the simulator forward.  Generated data can then be
  * retrieved using the fetch() method.
  *
  * This simulator is ideal for use within a custom NiFi processor.
  *
  * 2018AB04032 - Suraj P B - BITS Pilani Dissertation
  * @see https://github.com/orendain/trucking-nifi-bundle for an example of now a custom NiFi processor uses this simulator.
  */
object ManualTickAndFetchSimulator {
  def main(args: Array[String]): Unit = {
    if (args.length > 0) new ManualTickAndFetchSimulator(ConfigFactory.parseFile(File(args(1)).toJava))
    else new ManualTickAndFetchSimulator()
  }
}

class ManualTickAndFetchSimulator(val config: Config) extends Simulator {

  def this() = this(ConfigFactory.load())

  // Wrap 'config' with the default config and system defaults
  private implicit val combinedConfig: Config = ConfigFactory.load(config).getConfig("trucking-simulator")

  private val system = ActorSystem("ManualTickAndFetchSimulator")

  // Generate the drivers to be used in the simulation and create an Inbox for accepting messages
  private val drivers = DriverFactory.drivers
  private val inbox = Inbox.create(system)

  // Generate the different actors in the simulation
  private val depot = system.actorOf(NoSharingDepot.props())
  private val transmitter = system.actorOf(BufferTransmitter.props())
  private val flowManager = system.actorOf(SharedFlowManager.props(transmitter))
  private val dataGenerators = drivers.map { driver => system.actorOf(TruckAndTrafficGenerator.props(driver, depot, flowManager)) }
  private val coordinator = system.actorOf(ManualCoordinator.props(dataGenerators))

  // Ensure that the system is properly terminated when the simulator is shutdown.
  scala.sys.addShutdownHook { stop() }

  /**
    * Trigger the simulator to tick once.
    */
  def tick(): Unit = {
    coordinator ! ManualCoordinator.Tick
  }

  /**
    * Fetch the data generated since the last call to [[tick]].
    *
    * As long as this method is not called immediately after a [[tick]], results should return immediately and
    * the specified timeout is ignored.
    *
    * @param timeout Max amount of time to wait, in milliseconds, for the simulator to respond (default: 1000 milliseconds).
    * @return a list of [[TruckingData]] objects generated by the simulator.
    */
  def fetch(timeout: Int = 1000): List[TruckingData] = {
    inbox.send(transmitter, BufferTransmitter.Fetch)
    inbox.receive(timeout.milliseconds).asInstanceOf[List[TruckingData]]
  }

  /**
    * Manually stop the simulation, terminating the underlying system.
    *
    * @param timeout Time to wait for the system to terminate, in milliseconds (default: 5000 milliseconds).
    */
  def stop(timeout: Int = 5000): Unit = {
    system.terminate()
    Await.result(system.whenTerminated, timeout.milliseconds)
  }
}
